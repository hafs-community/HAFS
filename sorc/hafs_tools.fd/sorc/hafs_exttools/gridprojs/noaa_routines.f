      SUBROUTINE DIRCT1(GLAT1,GLON1,GLAT2,GLON2,FAZ,BAZ,S)
C
C *** SOLUTION OF THE GEODETIC DIRECT PROBLEM AFTER T.VINCENTY
C *** MODIFIED RAINSFORD'S METHOD WITH HELMERT'S ELLIPTICAL TERMS
C *** EFFECTIVE IN ANY AZIMUTH AND AT ANY DISTANCE SHORT OF ANTIPODAL
C
C *** A IS THE SEMI-MAJOR AXIS OF THE REFERENCE ELLIPSOID
C *** F IS THE FLATTENING OF THE REFERENCE ELLIPSOID
C *** LATITUDES AND LONGITUDES IN RADIANS POSITIVE NORTH AND EAST
C *** AZIMUTHS IN RADIANS CLOCKWISE FROM NORTH
C *** GEODESIC DISTANCE S ASSUMED IN UNITS OF SEMI-MAJOR AXIS A
C
C *** PROGRAMMED FOR CDC-6600 BY LCDR L.PFEIFER NGS ROCKVILLE MD 20FEB75
C *** MODIFIED FOR SYSTEM 360 BY JOHN G GERGEN NGS ROCKVILLE MD 750608
C
      IMPLICIT REAL*8 (A-H,O-Z)
      COMMON/CONST/PI,RAD
      COMMON/ELIPSOID/A,F
      DATA EPS/0.5D-13/

      A=6.37813662e6
      F=(6378.1370e3-6356.7523142e3)/6378.1370e3
      PI=dcos(dble(-1.0))
      RAD=dble(180.0)/PI

      R=1.-F
      TU=R*DSIN(GLAT1)/DCOS(GLAT1)
      SF=DSIN(FAZ)
      CF=DCOS(FAZ)
      BAZ=0.
      IF(CF.NE.0.) BAZ=DATAN2(TU,CF)*2.
      CU=1./DSQRT(TU*TU+1.)
      SU=TU*CU
      SA=CU*SF
      C2A=-SA*SA+1.
      X=DSQRT((1./R/R-1.)*C2A+1.)+1.
      X=(X-2.)/X
      C=1.-X
      C=(X*X/4.+1)/C
      D=(0.375D0*X*X-1.)*X
      TU=S/R/A/C
      Y=TU
  100 SY=DSIN(Y)
      CY=DCOS(Y)
      CZ=DCOS(BAZ+Y)
      E=CZ*CZ*2.-1.
      C=Y
      X=E*CY
      Y=E+E-1.
      Y=(((SY*SY*4.-3.)*Y*CZ*D/6.+X)*D/4.-CZ)*SY*D+TU
      IF(DABS(Y-C).GT.EPS)GO TO 100
      BAZ=CU*CY*CF-SU*SY
      C=R*DSQRT(SA*SA+BAZ*BAZ)
      D=SU*CY+CU*SY*CF
      GLAT2=DATAN2(D,C)
      C=CU*CY-SU*SY*CF
      X=DATAN2(SY*SF,C)
      C=((-3.*C2A+4.)*F+4.)*C2A*F/16.
      D=((E*CY*C+CZ)*SY*C+Y)*SA
      GLON2=GLON1+X-(1.-C)*D*F
      BAZ=DATAN2(SA,BAZ)+PI
      RETURN
      END

C----

      SUBROUTINE GAUSSLAT(JMAX,SLAT,WLAT)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM:  GAUSSLAT   COMPUTE GAUSSIAN LATITUDES
C   PRGMMR: IREDELL       ORG: W/NMC23       DATE: 92-04-16
C
C ABSTRACT: COMPUTES COSINES OF COLATITUDE AND GAUSSIAN WEIGHTS
C   ON THE GAUSSIAN LATITUDES.  THE GAUSSIAN LATITUDES ARE AT
C   THE ZEROES OF THE LEGENDRE POLYNOMIAL OF THE GIVEN ORDER.
C
C PROGRAM HISTORY LOG:
C   92-04-16  IREDELL
C
C USAGE:    CALL GAUSSLAT(JMAX,SLAT,WLAT)
C
C   INPUT ARGUMENT LIST:
C     JMAX     - INPUT NUMBER OF LATITUDES.
C
C   OUTPUT ARGUMENT LIST:
C     SLAT     - REAL (K) COSINES OF COLATITUDE.
C     WLAT     - REAL (K) GAUSSIAN WEIGHTS.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 77
C
C$$$
      REAL SLAT(JMAX),WLAT(JMAX)
      REAL PK(JMAX/2),PKM1(JMAX/2),PKM2(JMAX/2)
      PARAMETER(JZ=50)
      REAL BZ(JZ)
      DATA BZ        / 2.4048255577,  5.5200781103,
     $  8.6537279129, 11.7915344391, 14.9309177086, 18.0710639679,
     $ 21.2116366299, 24.3524715308, 27.4934791320, 30.6346064684,
     $ 33.7758202136, 36.9170983537, 40.0584257646, 43.1997917132,
     $ 46.3411883717, 49.4826098974, 52.6240518411, 55.7655107550,
     $ 58.9069839261, 62.0484691902, 65.1899648002, 68.3314693299,
     $ 71.4729816036, 74.6145006437, 77.7560256304, 80.8975558711,
     $ 84.0390907769, 87.1806298436, 90.3221726372, 93.4637187819,
     $ 96.6052679510, 99.7468198587, 102.888374254, 106.029930916,
     $ 109.171489649, 112.313050280, 115.454612653, 118.596176630,
     $ 121.737742088, 124.879308913, 128.020877005, 131.162446275,
     $ 134.304016638, 137.445588020, 140.587160352, 143.728733573,
     $ 146.870307625, 150.011882457, 153.153458019, 156.295034268 /
      PARAMETER(PI=3.14159265358979,C=(1.-(2./PI)**2)*0.25)
      PARAMETER(EPS=1.E-6)
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      JH=JMAX/2
      JHE=(JMAX+1)/2
      R=1./SQRT((JMAX+0.5)**2+C)
      DO J=1,MIN(JH,JZ)
        SLAT(J)=COS(BZ(J)*R)
      ENDDO
      DO J=JZ+1,JH
        SLAT(J)=COS((BZ(JZ)+(J-JZ)*PI)*R)
      ENDDO
      SPMAX=1.
      DO WHILE(SPMAX.GT.EPS)
        SPMAX=0.
        DO J=1,JH
          PKM1(J)=1.
          PK(J)=SLAT(J)
        ENDDO
        DO N=2,JMAX
          DO J=1,JH
            PKM2(J)=PKM1(J)
            PKM1(J)=PK(J)
            PK(J)=((2*N-1)*SLAT(J)*PKM1(J)-(N-1)*PKM2(J))/N
          ENDDO
        ENDDO
        DO J=1,JH
          SP=PK(J)*(1.-SLAT(J)**2)/(JMAX*(PKM1(J)-SLAT(J)*PK(J)))
          SLAT(J)=SLAT(J)-SP
          SPMAX=MAX(SPMAX,ABS(SP))
        ENDDO
      ENDDO
CDIR$ IVDEP
      DO J=1,JH
        WLAT(J)=(2.*(1.-SLAT(J)**2))/(JMAX*PKM1(J))**2
        SLAT(JMAX+1-J)=-SLAT(J)
        WLAT(JMAX+1-J)=WLAT(J)
      ENDDO
      IF(JHE.GT.JH) THEN
        SLAT(JHE)=0.
        WLAT(JHE)=2./JMAX**2
        DO N=2,JMAX,2
          WLAT(JHE)=WLAT(JHE)*N**2/(N-1)**2
        ENDDO
      ENDIF
      RETURN
      END SUBROUTINE GAUSSLAT

C----

      SUBROUTINE MOVECT(FLAT,FLON,TLAT,TLON,CROT,SROT)
!$$$  SUBPROGRAM DOCUMENTATION BLOCK
!
! SUBPROGRAM:  MOVECT     MOVE A VECTOR ALONG A GREAT CIRCLE
!   PRGMMR: IREDELL       ORG: W/NMC23       DATE: 96-04-10
!
! ABSTRACT: THIS SUBPROGRAM PROVIDES THE ROTATION PARAMETERS
!           TO MOVE A VECTOR ALONG A GREAT CIRCLE FROM ONE
!           POSITION TO ANOTHER WHILE CONSERVING ITS ORIENTATION
!           WITH RESPECT TO THE GREAT CIRCLE.  THESE ROTATION
!           PARAMETERS ARE USEFUL FOR VECTOR INTERPOLATION.
!
! PROGRAM HISTORY LOG:
!   96-04-10  IREDELL
! 1999-04-08  IREDELL  GENERALIZE PRECISION
!
! USAGE:    CALL MOVECT(FLAT,FLON,TLAT,TLON,CROT,SROT)
!
!   INPUT ARGUMENT LIST:
!     FLAT     - REAL LATITUDE IN DEGREES FROM WHICH TO MOVE THE VECTOR
!     FLON     - REAL LONGITUDE IN DEGREES FROM WHICH TO MOVE THE VECTOR
!     TLAT     - REAL LATITUDE IN DEGREES TO WHICH TO MOVE THE VECTOR
!     TLON     - REAL LONGITUDE IN DEGREES TO WHICH TO MOVE THE VECTOR
!
!   OUTPUT ARGUMENT LIST:
!     CROT     - REAL CLOCKWISE VECTOR ROTATION COSINE
!     SROT     - REAL CLOCKWISE VECTOR ROTATION SINE
!                (UTO=CROT*UFROM-SROT*VFROM;
!                 VTO=SROT*UFROM+CROT*VFROM)
!
! ATTRIBUTES:
!   LANGUAGE: FORTRAN 90
!
!$$$
      IMPLICIT NONE
!
      INTEGER,         PARAMETER     :: KD=SELECTED_REAL_KIND(15,45)
!     
      REAL*8,            INTENT(IN   ) :: FLAT, FLON
      REAL*8,            INTENT(IN   ) :: TLAT, TLON
      REAL*8,            INTENT(  OUT) :: CROT, SROT
!     
      REAL*8,   PARAMETER     :: CRDLIM=0.9999999
      REAL*8,   PARAMETER     :: PI=3.14159265358979
      REAL*8,   PARAMETER     :: DPR=180./PI
!     
      REAL*8                  :: CTLAT,STLAT,CFLAT,SFLAT
      REAL*8                  :: CDLON,SDLON,CRD
      REAL*8                  :: SRD2RN,STR,CTR,SFR,CFR
! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
!  COMPUTE COSINE OF THE RADIAL DISTANCE BETWEEN THE POINTS.
      CTLAT=COS(TLAT/DPR)
      STLAT=SIN(TLAT/DPR)
      CFLAT=COS(FLAT/DPR)
      SFLAT=SIN(FLAT/DPR)
      CDLON=COS((FLON-TLON)/DPR)
      SDLON=SIN((FLON-TLON)/DPR)
      CRD=STLAT*SFLAT+CTLAT*CFLAT*CDLON
! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
!  COMPUTE ROTATIONS AT BOTH POINTS WITH RESPECT TO THE GREAT CIRCLE
!  AND COMBINE THEM TO GIVE THE TOTAL VECTOR ROTATION PARAMETERS.
      IF(ABS(CRD).LE.CRDLIM) THEN
         SRD2RN=-1/(1-CRD**2)
         STR=CFLAT*SDLON
         CTR=CFLAT*STLAT*CDLON-SFLAT*CTLAT
         SFR=CTLAT*SDLON
         CFR=CTLAT*SFLAT*CDLON-STLAT*CFLAT
         CROT=SRD2RN*(CTR*CFR-STR*SFR)
         SROT=SRD2RN*(CTR*SFR+STR*CFR)
!  USE A DIFFERENT APPROXIMATION FOR NEARLY COINCIDENT POINTS.
!  MOVING VECTORS TO ANTIPODAL POINTS IS AMBIGUOUS ANYWAY.
      ELSE
         CROT=CDLON
         SROT=SDLON*STLAT
      ENDIF
! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      END SUBROUTINE MOVECT
