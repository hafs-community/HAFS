<?xml version="1.0"?>

<!DOCTYPE workflow [

  <!-- Set some variables for use later: -->

  <!ENTITY COM_SCRUB_TIME "10800">
  <!ENTITY WORK_SCRUB_TIME "3600">
  <!ENTITY CYCLE_THROTTLE "5">
  <!ENTITY TASK_THROTTLE "120">

  <!-- Maximum number of times to try various jobs -->
  <!ENTITY MAX_TRIES_TRANSFER "6"> <!-- pulling data over network -->
  <!ENTITY MAX_TRIES_BIG_JOBS "1"> <!-- forecast or other huge jobs -->
  <!ENTITY MAX_TRIES "1"> <!-- everything else -->

 <!-- Extra variables to send to the exhwrf_launch.py -->
  <!ENTITY MORE_LAUNCH_VARS "@[MORE_LAUNCH_VARS]">

  <!-- Multistorm IDs -->
  <!ENTITY MULTISTORM "@[MULTISTORM==YES?YES:NO]">
  <!ENTITY BASINS "@[BASINS:-]">
  <!ENTITY MULTISTORM_SIDS "@[MULTISTORM_SIDS:-]">
  <!ENTITY RENUM "@[RENUM:-]">
  <!ENTITY FAKE_STORM "storm1">
  <!ENTITY STORMS "storm1 storm2 storm3 storm4 storm5 storm6">
  <!ENTITY REAL_STORMS "storm2 storm3 storm4 storm5 storm6">

  <!-- Storm we are going to run -->
  <!ENTITY SID "@[SID.uc]">
  <!ENTITY sidlc "@[SID.lc]">
  <!ENTITY STORMLABEL "@[stormlabel]">
  <!ENTITY CASE_ROOT "@[CASE_ROOT]">

  <!-- scrub config -->
  <!ENTITY SCRUB_WORK "@[SCRUB_WORK]">
  <!ENTITY SCRUB_COM "@[SCRUB_COM]">

  <!-- Directory paths and experiment names. -->
  <!ENTITY WHERE_AM_I "@[WHERE_AM_I]">
  <!ENTITY PRE      "@[USHhafs]/rocoto_pre_job.sh">
  <!ENTITY RUN      "@[RUN]">
  <!ENTITY EXPT     "@[EXPT]">
  <!ENTITY SUBEXPT  "@[SUBEXPT:-EXPT]">
  <!ENTITY HOMEhafs "@[CDSAVE]/&EXPT;">
  <!ENTITY PARMhafs "@[PARMhafs:-&HOMEhafs;/parm]">
  <!ENTITY JOBhafs  "@[JOBhafs:-&HOMEhafs;/jobs]">
  <!ENTITY EXhafs   "@[EXhafs:-&HOMEhafs;/scripts]">
  <!ENTITY USHhafs  "@[USHhafs:-&HOMEhafs;/ush]">
  <!ENTITY FIXhafs  "&HOMEhafs;/fix">
  <!ENTITY EXEChafs "&HOMEhafs;/exec">
  <!ENTITY WORKhafs "@[CDSCRUB]/&SUBEXPT;/@Y@m@d@H/&SID;">
  <!ENTITY COMhafs  "@[CDSCRUB]/&SUBEXPT;/com/@Y@m@d@H/&SID;">
  <!ENTITY LOGhafs  "@[CDSCRUB]/&SUBEXPT;/log">

  <!ENTITY GFSVER   "@[GFSVER:-PROD2019]">
  <!ENTITY COMgfs   "@[COMgfs:-&WORKhafs;/hafsdata]">
  <!ENTITY COMrtofs "@[COMrtofs:-&WORKhafs;/hafsdata]">

  <!-- The output conf file for each cycle: -->
  <!ENTITY CONFhafs "&COMhafs;/&STORMLABEL;.conf">
  <!ENTITY HOLDVARS "&COMhafs;/&STORMLABEL;.holdvars.txt">

  <!-- Enabling or disabling  parts of the workflow: -->
  <!ENTITY FETCH_INPUT "@[FETCH_INPUT]">
  <!ENTITY RUN_ATM_MVNEST "@[RUN_ATM_MVNEST]">
  <!ENTITY RUN_ATM_MVNEST_ENS "@[RUN_ATM_MVNEST_ENS]">
  <!ENTITY RUN_ATM_INIT "@[RUN_ATM_INIT]">
  <!ENTITY RUN_ATM_INIT_FGAT "@[RUN_ATM_INIT_FGAT]">
  <!ENTITY RUN_ATM_INIT_ENS "@[RUN_ATM_INIT_ENS]">
  <!ENTITY RUN_ATM_MERGE "@[RUN_ATM_MERGE]">
  <!ENTITY RUN_ATM_MERGE_FGAT "@[RUN_ATM_MERGE_FGAT]">
  <!ENTITY RUN_ATM_MERGE_ENS "@[RUN_ATM_MERGE_ENS]">
  <!ENTITY RUN_ATM_VI "@[RUN_ATM_VI]">
  <!ENTITY RUN_ATM_VI_FGAT "@[RUN_ATM_VI_FGAT]">
  <!ENTITY RUN_ATM_VI_ENS "@[RUN_ATM_VI_ENS]">
  <!ENTITY RUN_FGAT "@[RUN_FGAT]">
  <!ENTITY RUN_GSI "@[RUN_GSI]">
  <!ENTITY GSI_D01 "@[GSI_D01]">
  <!ENTITY GSI_D02 "@[GSI_D02]">
  <!ENTITY GSI_D03 "@[GSI_D03]">
  <!ENTITY RUN_ENSDA "@[RUN_ENSDA]">
  <!ENTITY RUN_ENKF "@[RUN_ENKF]">
  <!ENTITY RUN_ANALYSIS_MERGE "@[RUN_ANALYSIS_MERGE]">
  <!ENTITY RUN_ANALYSIS_MERGE_ENS "@[RUN_ANALYSIS_MERGE_ENS]">
  <!ENTITY RUN_OCEAN "@[RUN_OCEAN]">
  <!ENTITY RUN_WAVE "@[RUN_WAVE]">
  <!ENTITY RUN_DATM "@[RUN_DATM]">
  <!ENTITY RUN_DOCN "@[RUN_DOCN]">
  <!ENTITY RUN_HRDGRAPHICS "@[RUN_HRDGRAPHICS:-NO]">
  <!ENTITY RUN_EMCGRAPHICS "@[RUN_EMCGRAPHICS:-NO]">
  <!ENTITY MAKE_MESH_ATM "@[MAKE_MESH_ATM]">
  <!ENTITY MAKE_MESH_OCN "@[MAKE_MESH_OCN]">

  <!ENTITY ENS_SIZE "@[ENS_SIZE]">
  <!ENTITY ENSIDS "@[ENSIDS]">

  <!ENTITY gtype "@[gtype:-regional]">
  <!ENTITY FORECAST_RESOURCES "&@[FORECAST_RESOURCES:-FORECAST_RESOURCES_regional_40x30io3x72_omp2];">
  <!ENTITY FORECAST_ENS_RESOURCES "&@[FORECAST_ENS_RESOURCES:-FORECAST_ENS_RESOURCES_regional_40x30io3x72_omp2];">

  <!-- CPU account name -->
  <!ENTITY CPU_ACCOUNT "@[CPU_ACCOUNT]">

  <!-- Load the env_vars.ent into ENV_VARS so we can set variables
  common to all jobs. -->
  <!ENTITY ENV_VARS SYSTEM "env_vars.ent">

  <!-- Site that we are currently running on -->
  <!ENTITY % SITES    SYSTEM "sites/all.ent">
  %SITES;

  <!ENTITY % SITE_DEFAULTS SYSTEM "sites/defaults.ent">
  %SITE_DEFAULTS;

@** if SITE_FILE==
  <!-- No site file, so choose from defaults. -->
@**   if WHERE_AM_I==jet
@**     if WHICH_JET==t
  %tjet;
@**     elseif WHICH_JET==u
  %ujet;
@**     elseif WHICH_JET==s
  %sjet;
@**     elseif WHICH_JET==v
  %vjet;
@**     elseif WHICH_JET==x
  %xjet;
@**     elseif WHICH_JET==k
  %kjet;
@**     else
  %xjet; <!-- Default is xjet when nothing else is specified -->
@**     endif
@**   else
  %@[WHERE_AM_I];
@**   endif
@** else
  <!ENTITY % CUSTOM_SITE SYSTEM "@[SITE_FILE]">
  %CUSTOM_SITE;
@** endif

]>

<!-- Workflow below here -->

<workflow realtime="F" cyclethrottle="&CYCLE_THROTTLE;"
          scheduler="&SCHEDULER;" taskthrottle="&TASK_THROTTLE;">

  @[CYCLE_LIST]

  <log><cyclestr>&LOGhafs;/rocoto_@Y@m@d@H.log</cyclestr></log>

  <task name="launch" maxtries="99">
    <!--<command>&PRE; &EXhafs;/exhafs_launch.py &SID; <cyclestr>@Y@m@d@H</cyclestr></command>-->
    <command>&PRE; &EXhafs;/exhafs_launch.py &MULTISTORM_SIDS; &BASINS; &RENUM; <cyclestr>@Y@m@d@H &SID; &CASE_ROOT; '&PARMhafs;' config.EXPT='&EXPT;' config.SUBEXPT='&SUBEXPT;' config.HOMEhafs='&HOMEhafs;' dir.USHhhafs='&USHhafs;' &MORE_LAUNCH_VARS; </cyclestr></command>
    <jobname>hafs_launch_&SID;_<cyclestr>@Y@m@d@H</cyclestr></jobname>
    <join><cyclestr>&WORKhafs;/hafs_launch.log</cyclestr></join>
    <account>&ACCOUNT;</account>
    &RESERVATION;
    <queue>&QUEUE_PE;</queue>
    &PE_EXTRA;
    &CORES_EXTRA;
    &LAUNCH_RESOURCES;
    &ENV_VARS;

    <dependency>
      <and>
        <!-- Cycling dependency: do not start until the prior cycle's
        launch job is done, unless there is no prior cycle. -->
        <or>
          <taskdep task="launch" cycle_offset="-6:00:00"/>
          <not>
            <cycleexistdep cycle_offset="-6:00:00"/>
          </not>
        </or>
        <!-- AND... don't start until 3:20 past the synoptic time.  The
        GFS does not start until then, so there is little point to
        starting earlier. -->
        <timedep><cyclestr offset="3:20:00">@Y@m@d@H@M@S</cyclestr></timedep>
      </and>
    </dependency>

    <!--
    <rewind>
      <sh>&USHhafs;/hafs_scrub.py '<cyclestr>&COMhafs;</cyclestr>' '<cyclestr>&WORKhafs;</cyclestr>'</sh>
    </rewind>
    -->
  </task>

  <task name="input" maxtries="&MAX_TRIES_TRANSFER;">
    <command>&PRE; &EXhafs;/exhafs_input.py</command>
    <jobname>hafs_input_&SID;_<cyclestr>@Y@m@d@H</cyclestr></jobname>
    <join><cyclestr>&WORKhafs;/hafs_input.log</cyclestr></join>
    <account>&ACCOUNT;</account>
    &RESERVATION;
    <queue>&QUEUE_SERVICE;</queue>
    &SERVICE_EXTRA;
    <cores>1</cores>
    &CORES_EXTRA;
    <envar><name>TOTAL_TASKS</name><value>1</value></envar>
    <walltime>06:00:00</walltime>
    &MEMORY;
    &ENV_VARS;

    <dependency>
      <and>
        <taskdep task="launch"/>
        <streq><left>&FETCH_INPUT;</left><right>YES</right></streq>
        <streq><left>&RUN_DATM;</left><right>NO</right></streq>
      </and>
    </dependency>
  </task>

  <task name="atm_prep" maxtries="&MAX_TRIES;">
    <command>&JOBhafs;/JHAFS_ATM_PREP</command>
    <jobname>hafs_atm_prep_&SID;_<cyclestr>@Y@m@d@H</cyclestr></jobname>
    <join><cyclestr>&WORKhafs;/hafs_atm_prep.log</cyclestr></join>
    <account>&ACCOUNT;</account>
    &RESERVATION;
    <queue>&QUEUE_PE;</queue>
    &PE_EXTRA;
    &CORES_EXTRA;
    &ATM_PREP_RESOURCES;
    &ENV_VARS;

    <dependency>
      <and>
        <taskdep task="launch"/>
      </and>
    </dependency>
  </task>

@** if RUN_ATM_MVNEST==YES
  <task name="atm_prep_mvnest" maxtries="&MAX_TRIES;">
    <command>&JOBhafs;/JHAFS_ATM_PREP</command>
    <jobname>hafs_atm_prep_mvnest_&SID;_<cyclestr>@Y@m@d@H</cyclestr></jobname>
    <join><cyclestr>&WORKhafs;/hafs_atm_prep_mvnest.log</cyclestr></join>
    <account>&ACCOUNT;</account>
    &RESERVATION;
    <queue>&QUEUE_PE;</queue>
    &PE_EXTRA;
    &CORES_EXTRA;
    &ATM_PREP_RESOURCES;
    &ENV_VARS;
    <envar><name>ATM_PREP_MVNEST</name><value>YES</value></envar>

    <dependency>
      <and>
        <taskdep task="launch"/>
      </and>
    </dependency>
  </task>
@** endif

  <task name="atm_ic" maxtries="&MAX_TRIES;">
    <command>&JOBhafs;/JHAFS_ATM_IC</command>
    <jobname>hafs_atm_ic_&SID;_<cyclestr>@Y@m@d@H</cyclestr></jobname>
    <join><cyclestr>&WORKhafs;/hafs_atm_ic.log</cyclestr></join>
    <account>&ACCOUNT;</account>
    &RESERVATION;
    <queue>&QUEUE_PE;</queue>
    &PE_EXTRA;
    &CORES_EXTRA;
    &ATM_IC_RESOURCES;
    &ENV_VARS;

    <dependency>
      <and>
        <taskdep task="atm_prep"/>
        <streq><left>&RUN_DATM;</left><right>NO</right></streq>
        <or>
          <taskdep task="input"/>
          <strneq><left>&FETCH_INPUT;</left><right>YES</right></strneq>
        </or>
        <!-- Second dependency: the GFS output must be available -->
        <timedep><cyclestr offset="3:25:00">@Y@m@d@H@M@S</cyclestr></timedep>
        <!-- Or use COMgfs file dependency. Don't start until GFS analysis is available.-->
        <and>
@** if GFSVER==PROD2019
          <datadep age="02:00" minsize="15000000000"><cyclestr>&COMgfs;/gfs.@Y@m@d/@H/gfs.t@Hz.atmanl.nemsio</cyclestr></datadep>
          <datadep age="02:00" minsize="1000000000"><cyclestr>&COMgfs;/gfs.@Y@m@d/@H/gfs.t@Hz.sfcanl.nemsio</cyclestr></datadep>
@** endif
@** if GFSVER==PROD2021
          <datadep age="02:00" minsize="12000000000"><cyclestr>&COMgfs;/gfs.@Y@m@d/@H/atmos/gfs.t@Hz.atmanl.nc</cyclestr></datadep>
          <datadep age="02:00" minsize="200000000"><cyclestr>&COMgfs;/gfs.@Y@m@d/@H/atmos/gfs.t@Hz.sfcanl.nc</cyclestr></datadep>
@** endif
        </and>
      </and>
    </dependency>
  </task>

@** if gtype==regional

@** if RUN_ATM_INIT_FGAT==YES
  <metatask name="atm_ic_fgat">
  <var name="FGAT_HR">03 06 09</var>
  <task name="atm_ic_fgat#FGAT_HR#" maxtries="&MAX_TRIES;">
    <command>&JOBhafs;/JHAFS_ATM_IC</command>
    <jobname>hafs_atm_ic_fgat#FGAT_HR#_&SID;_<cyclestr>@Y@m@d@H</cyclestr></jobname>
    <join><cyclestr>&WORKhafs;/hafs_atm_ic_fgat#FGAT_HR#.log</cyclestr></join>
    <account>&ACCOUNT;</account>
    &RESERVATION;
    <queue>&QUEUE_PE;</queue>
    &PE_EXTRA;
    &CORES_EXTRA;
    &ATM_IC_RESOURCES;
    &ENV_VARS;
    <envar><name>FGAT_MODEL</name><value>gdas</value></envar>
    <envar><name>FGAT_HR</name><value>#FGAT_HR#</value></envar>

    <dependency>
      <and>
        <taskdep task="atm_prep"/>
        <streq><left>&RUN_DATM;</left><right>NO</right></streq>
        <or>
          <taskdep task="input"/>
          <strneq><left>&FETCH_INPUT;</left><right>YES</right></strneq>
        </or>
        <!-- Second dependency: the GDAS output must be available -->
        <timedep><cyclestr offset="3:25:00">@Y@m@d@H@M@S</cyclestr></timedep>
        <!-- Or use COMgfs file dependency. Don't start until GFS analysis is available.-->
        <and>
@** if GFSVER==PROD2019
          <datadep age="02:00" minsize="2000000000"><cyclestr offset="-6:00:00">&COMgfs;/gdas.@Y@m@d/@H/gdas.t@Hz.atmf0#FGAT_HR#.nemsio</cyclestr></datadep>
          <datadep age="02:00" minsize="500000000"><cyclestr offset="-6:00:00">&COMgfs;/gdas.@Y@m@d/@H/gdas.t@Hz.sfcf0#FGAT_HR#.nemsio</cyclestr></datadep>
@** endif
@** if GFSVER==PROD2021
          <datadep age="02:00" minsize="2000000000"><cyclestr offset="-6:00:00">&COMgfs;/gdas.@Y@m@d/@H/atmos/gdas.t@Hz.atmf0#FGAT_HR#.nc</cyclestr></datadep>
          <datadep age="02:00" minsize="500000000"><cyclestr offset="-6:00:00">&COMgfs;/gdas.@Y@m@d/@H/atmos/gdas.t@Hz.sfcf0#FGAT_HR#.nc</cyclestr></datadep>
@** endif
        </and>
      </and>
    </dependency>
  </task>
  </metatask>
@** endif

@** if RUN_ATM_INIT==YES
  <task name="atm_init" maxtries="&MAX_TRIES;">
    <command>&JOBhafs;/JHAFS_ATM_INIT</command>
    <jobname>hafs_atm_init_&SID;_<cyclestr>@Y@m@d@H</cyclestr></jobname>
    <join><cyclestr>&WORKhafs;/hafs_atm_init.log</cyclestr></join>
    <account>&ACCOUNT;</account>
    &RESERVATION;
    <queue>&QUEUE_PE;</queue>
    &PE_EXTRA;
    &CORES_EXTRA;
    &ATM_INIT_RESOURCES;
    &ENV_VARS;

    <dependency>
      <and>
        <taskdep task="atm_ic"/>
      </and>
    </dependency>
  </task>
@** endif

@** if RUN_ATM_INIT_FGAT==YES
  <metatask name="atm_init_fgat">
  <var name="FGAT_HR">03 06 09</var>
  <task name="atm_init_fgat#FGAT_HR#" maxtries="&MAX_TRIES;">
    <command>&JOBhafs;/JHAFS_ATM_INIT</command>
    <jobname>hafs_atm_init_fgat#FGAT_HR#_&SID;_<cyclestr>@Y@m@d@H</cyclestr></jobname>
    <join><cyclestr>&WORKhafs;/hafs_atm_init_fgat#FGAT_HR#.log</cyclestr></join>
    <account>&ACCOUNT;</account>
    &RESERVATION;
    <queue>&QUEUE_PE;</queue>
    &PE_EXTRA;
    &CORES_EXTRA;
    &ATM_INIT_RESOURCES;
    &ENV_VARS;
    <envar><name>FGAT_MODEL</name><value>gdas</value></envar>
    <envar><name>FGAT_HR</name><value>#FGAT_HR#</value></envar>

    <dependency>
      <and>
        <taskdep task="atm_ic_fgat#FGAT_HR#"/>
      </and>
    </dependency>
  </task>
  </metatask>
@** endif

@** if RUN_ATM_MERGE==YES
  <task name="atm_merge" maxtries="&MAX_TRIES;">
    <command>&JOBhafs;/JHAFS_MERGE</command>
    <jobname>hafs_atm_merge_&SID;_<cyclestr>@Y@m@d@H</cyclestr></jobname>
    <join><cyclestr>&WORKhafs;/hafs_atm_merge.log</cyclestr></join>
    <account>&ACCOUNT;</account>
    &RESERVATION;
    <queue>&QUEUE_PE;</queue>
    &PE_EXTRA;
    &CORES_EXTRA;
    &MERGE_RESOURCES;
    &ENV_VARS;
    <envar><name>MERGE_TYPE</name><value>init</value></envar>
    <dependency>
      <and>
        <taskdep task="atm_init"/>
	<or>
          <not><cycleexistdep cycle_offset="-6:00:00"/></not>
          <datadep age="02:00"><cyclestr offset="-6:00:00">&COMhafs;</cyclestr>/RESTART/<cyclestr>@Y@m@d.@H</cyclestr>0000.fv_core.res.tile1.nc</datadep>
        </or>
      </and>
    </dependency>
  </task>
@** endif

@** if RUN_ATM_MERGE_FGAT==YES
  <metatask name="atm_merge_fgat">
  <var name="FGAT_HR">03 06 09</var>
  <task name="atm_merge_fgat#FGAT_HR#" maxtries="&MAX_TRIES;">
    <command>&JOBhafs;/JHAFS_MERGE</command>
    <jobname>hafs_atm_merge_fgat#FGAT_HR#_&SID;_<cyclestr>@Y@m@d@H</cyclestr></jobname>
    <join><cyclestr>&WORKhafs;/hafs_atm_merge_fgat#FGAT_HR#.log</cyclestr></join>
    <account>&ACCOUNT;</account>
    &RESERVATION;
    <queue>&QUEUE_PE;</queue>
    &PE_EXTRA;
    &CORES_EXTRA;
    &MERGE_RESOURCES;
    &ENV_VARS;
    <envar><name>MERGE_TYPE</name><value>init</value></envar>
    <envar><name>FGAT_MODEL</name><value>gdas</value></envar>
    <envar><name>FGAT_HR</name><value>#FGAT_HR#</value></envar>

    <dependency>
      <and>
        <taskdep task="atm_init_fgat#FGAT_HR#"/>
	<or>
          <not><cycleexistdep cycle_offset="-6:00:00"/></not>
          <datadep age="02:00"><cyclestr offset="-6:00:00">&COMhafs;</cyclestr>/RESTART/<cyclestr offset="3:00:00">@Y@m@d.@H</cyclestr>0000.fv_core.res.tile1.nc</datadep>
        </or>
      </and>
    </dependency>
  </task>
  </metatask>
@** endif

@** if RUN_ATM_VI==YES
  <task name="atm_vi" maxtries="&MAX_TRIES;">
    <command>&JOBhafs;/JHAFS_ATM_VI</command>
    <jobname>hafs_atm_vi_&SID;_<cyclestr>@Y@m@d@H</cyclestr></jobname>
    <join><cyclestr>&WORKhafs;/hafs_atm_vi.log</cyclestr></join>
    <account>&ACCOUNT;</account>
    &RESERVATION;
    <queue>&QUEUE_PE;</queue>
    &PE_EXTRA;
    &CORES_EXTRA;
    &ATM_VI_RESOURCES;
    &ENV_VARS;

    <dependency>
      <and>
        <taskdep task="atm_init"/>
	<or>
          <not><cycleexistdep cycle_offset="-6:00:00"/></not>
          <and>
            <datadep age="02:00"><cyclestr offset="-6:00:00">&COMhafs;</cyclestr>/RESTART/<cyclestr>@Y@m@d.@H</cyclestr>0000.fv_core.res.tile1.nc</datadep>
            <datadep age="02:00"><cyclestr offset="-6:00:00">&COMhafs;/&sidlc;.@Y@m@d@H</cyclestr>.&RUN;.trak.atcfunix.f012</datadep>
          </and>
        </or>
      </and>
    </dependency>
  </task>
@** endif

@** if RUN_ATM_VI_FGAT==YES
  <metatask name="atm_vi_fgat">
  <var name="FGAT_HR">03 06 09</var>
  <task name="atm_vi_fgat#FGAT_HR#" maxtries="&MAX_TRIES;">
    <command>&JOBhafs;/JHAFS_ATM_VI</command>
    <jobname>hafs_atm_vi_fgat#FGAT_HR#_&SID;_<cyclestr>@Y@m@d@H</cyclestr></jobname>
    <join><cyclestr>&WORKhafs;/hafs_atm_vi_fgat#FGAT_HR#.log</cyclestr></join>
    <account>&ACCOUNT;</account>
    &RESERVATION;
    <queue>&QUEUE_PE;</queue>
    &PE_EXTRA;
    &CORES_EXTRA;
    &ATM_VI_RESOURCES;
    &ENV_VARS;
    <envar><name>FGAT_MODEL</name><value>gdas</value></envar>
    <envar><name>FGAT_HR</name><value>#FGAT_HR#</value></envar>

    <dependency>
      <and>
        <taskdep task="atm_init_fgat#FGAT_HR#"/>
	<or>
          <not><cycleexistdep cycle_offset="-6:00:00"/></not>
          <and>
            <datadep age="02:00"><cyclestr offset="-6:00:00">&COMhafs;</cyclestr>/RESTART/<cyclestr offset="3:00:00">@Y@m@d.@H</cyclestr>0000.fv_core.res.tile1.nc</datadep>
            <datadep age="02:00"><cyclestr offset="-6:00:00">&COMhafs;/&sidlc;.@Y@m@d@H</cyclestr>.&RUN;.trak.atcfunix.f012</datadep>
          </and>
        </or>
      </and>
    </dependency>
  </task>
  </metatask>
@** endif

@** endif

@** if gtype==regional
  <metatask name="atm_lbc">
    <var name="group">001 002 003 004 005 006</var>
    <task name="atm_lbc#group#" maxtries="&MAX_TRIES;">
      <command>&JOBhafs;/JHAFS_ATM_LBC</command>
      <jobname>hafs_atm_lbc#group#_&SID;_<cyclestr>@Y@m@d@H</cyclestr></jobname>
      <join><cyclestr>&WORKhafs;/hafs_atm_lbc#group#.log</cyclestr></join>
      <account>&ACCOUNT;</account>
      &RESERVATION;
      <queue>&QUEUE_PE;</queue>
      &PE_EXTRA;
      &CORES_EXTRA;
      &ATM_LBC_RESOURCES;
      &ENV_VARS;
      <envar><name>BC_GROUPN</name><value>6</value></envar>
      <envar><name>BC_GROUPI</name><value>#group#</value></envar>

      <dependency>
        <and>
          <taskdep task="atm_prep"/>
          <streq><left>&RUN_DATM;</left><right>NO</right></streq>
          <or>
            <taskdep task="input"/>
            <strneq><left>&FETCH_INPUT;</left><right>YES</right></strneq>
          </or>
          <!-- Second dependency: the GFS output must be available -->
          <timedep><cyclestr offset="4:10:00">@Y@m@d@H@M@S</cyclestr></timedep>
          <!-- Or use COMgfs file dependency. Don't start until GFS 126h forecast is available.-->
          <or>
@** if GFSVER==PROD2019
            <datadep age="02:00" minsize="15000000000"><cyclestr>&COMgfs;/gfs.@Y@m@d/@H/gfs.t@Hz.atmf126.nemsio</cyclestr></datadep>
            <datadep age="02:00" minsize="300000000"><cyclestr>&COMgfs;/gfs.@Y@m@d/@H/gfs.t@Hz.pgrb2.0p25.f126</cyclestr></datadep>
@** endif
@** if GFSVER==PROD2021
            <datadep age="02:00" minsize="300000000"><cyclestr>&COMgfs;/gfs.@Y@m@d/@H/atmos/gfs.t@Hz.pgrb2.0p25.f126</cyclestr></datadep>
            <datadep age="02:00" minsize="6000000000"><cyclestr>&COMgfs;/gfs.@Y@m@d/@H/atmos/gfs.t@Hz.atmf0126.nc</cyclestr></datadep>
@** endif
          </or>
        </and>
      </dependency>
    </task>
  </metatask>

@**   if RUN_DOCN==YES
  <task name="ocn_prep" maxtries="&MAX_TRIES;">
    <command>&JOBhafs;/JHAFS_OCN_PREP</command>
    <jobname>hafs_ocn_prep_&SID;_<cyclestr>@Y@m@d@H</cyclestr></jobname>
    <join><cyclestr>&WORKhafs;/hafs_ocn_prep.log</cyclestr></join>
    <account>&ACCOUNT;</account>
    &RESERVATION;
    <queue>&QUEUE_PE;</queue>
    &PE_EXTRA;
    &CORES_EXTRA;
    &DOCN_PREP_RESOURCES;
    &ENV_VARS;

    <dependency>
      <taskdep task="launch"/>
    </dependency>
  </task>
@**    elseif RUN_OCEAN==YES
  <task name="ocn_prep" maxtries="&MAX_TRIES;">
    <command>&JOBhafs;/JHAFS_OCN_PREP</command>
    <jobname>hafs_ocn_prep_&SID;_<cyclestr>@Y@m@d@H</cyclestr></jobname>
    <join><cyclestr>&WORKhafs;/hafs_ocn_prep.log</cyclestr></join>
    <account>&ACCOUNT;</account>
    &RESERVATION;
    <queue>&QUEUE_PE;</queue>
    &PE_EXTRA;
    &CORES_EXTRA;
    &OCN_PREP_RESOURCES;
    &ENV_VARS;

    <dependency>
      <and>
        <taskdep task="atm_prep"/>
        <or>
          <taskdep task="input"/>
          <strneq><left>&FETCH_INPUT;</left><right>YES</right></strneq>
        </or>
        <!-- Second dependency: the GFS output must be available -->
        <timedep><cyclestr offset="3:25:00">@Y@m@d@H@M@S</cyclestr></timedep>
        <!-- Or use COMgfs/Ocean file dependency. Don't start until GFS/Ocean analysis is available.-->
        <and>
          <or>
            <datadep age="02:00" minsize="25000000000"><cyclestr>&COMrtofs;/rtofs.@Y@m@d/rtofs_glo.t00z.n00.restart.a</cyclestr></datadep>
            <datadep age="02:00" minsize="10000000000"><cyclestr>&COMrtofs;/rtofs.@Y@m@d/rtofs_glo.t00z.n00.restart.a.tgz</cyclestr></datadep>
          </or>
          <or>
            <strneq><left><cyclestr>@H</cyclestr></left><right>00</right></strneq>
            <or>
              <datadep age="02:00" minsize="12000000000"><cyclestr>&COMrtofs;/rtofs.@Y@m@d/rtofs_glo.t00z.n00.archv.a</cyclestr></datadep>
              <datadep age="02:00" minsize="5000000000"><cyclestr>&COMrtofs;/rtofs.@Y@m@d/rtofs_glo.t00z.n00.archv.a.tgz</cyclestr></datadep>
            </or>
          </or>
          <or>
            <streq><left><cyclestr>@H</cyclestr></left><right>00</right></streq>
            <or>
              <datadep age="02:00" minsize="12000000000"><cyclestr>&COMrtofs;/rtofs.@Y@m@d/rtofs_glo.t00z.f@H.archv.a</cyclestr></datadep>
              <datadep age="02:00" minsize="5000000000"><cyclestr>&COMrtofs;/rtofs.@Y@m@d/rtofs_glo.t00z.f@H.archv.a.tgz</cyclestr></datadep>
            </or>
          </or>
@** if GFSVER==PROD2019
          <datadep age="02:00" minsize="300000000"><cyclestr>&COMgfs;/gfs.@Y@m@d/@H/gfs.t@Hz.pgrb2.0p25.f129</cyclestr></datadep>
@** endif
@** if GFSVER==PROD2021
          <datadep age="02:00" minsize="300000000"><cyclestr>&COMgfs;/gfs.@Y@m@d/@H/atmos/gfs.t@Hz.pgrb2.0p25.f129</cyclestr></datadep>
@** endif
        </and>
      </and>
    </dependency>
  </task>
@** endif

@** if RUN_WAVE==YES
  <task name="wav_prep" maxtries="&MAX_TRIES;">
    <command>&JOBhafs;/JHAFS_WAV_PREP</command>
    <jobname>hafs_wav_prep_&SID;_<cyclestr>@Y@m@d@H</cyclestr></jobname>
    <join><cyclestr>&WORKhafs;/hafs_wav_prep.log</cyclestr></join>
    <account>&ACCOUNT;</account>
    &RESERVATION;
    <queue>&QUEUE_PE;</queue>
    &PE_EXTRA;
    &CORES_EXTRA;
    &WAV_PREP_RESOURCES;
    &ENV_VARS;

    <dependency>
      <and>
        <taskdep task="atm_prep"/>
        <or>
          <taskdep task="input"/>
          <strneq><left>&FETCH_INPUT;</left><right>YES</right></strneq>
        </or>
        <!-- Second dependency: the GFS output must be available -->
        <timedep><cyclestr offset="3:25:00">@Y@m@d@H@M@S</cyclestr></timedep>
        <!-- Or use COMgfs/Ocean file dependency. Don't start until GFS/Ocean analysis is available.-->
        <and>
@** if GFSVER==PROD2019
          <datadep age="02:00" minsize="300000000"><cyclestr>&COMgfs;/gfs.@Y@m@d/@H/gfs.t@Hz.pgrb2.0p25.f129</cyclestr></datadep>
@** endif
@** if GFSVER==PROD2021
          <datadep age="02:00" minsize="300000000"><cyclestr>&COMgfs;/gfs.@Y@m@d/@H/atmos/gfs.t@Hz.pgrb2.0p25.f129</cyclestr></datadep>
@** endif
        </and>
      </and>
    </dependency>
  </task>
@** endif

@** if RUN_GSI==YES

  <task name="obs_prep" maxtries="&MAX_TRIES;">
    <command>&JOBhafs;/JHAFS_OBS_PREP</command>
    <jobname>hafs_obs_prep_&SID;_<cyclestr>@Y@m@d@H</cyclestr></jobname>
    <join><cyclestr>&WORKhafs;/hafs_obs_prep.log</cyclestr></join>
    <account>&ACCOUNT;</account>
    &RESERVATION;
    <queue>&QUEUE_PE;</queue>
    &PE_EXTRA;
    &CORES_EXTRA;
    &OBS_PREP_RESOURCES;
    &ENV_VARS;

    <dependency>
      <or>
        <taskdep task="atm_ic" state="RUNNING"/>
        <taskdep task="atm_ic"/>
      </or>
    </dependency>
  </task>

  <task name="analysis" maxtries="&MAX_TRIES;">
    <command>&JOBhafs;/JHAFS_ANALYSIS</command>
    <jobname>hafs_analysis_&SID;_<cyclestr>@Y@m@d@H</cyclestr></jobname>
    <join><cyclestr>&WORKhafs;/hafs_analysis.log</cyclestr></join>
    <account>&ACCOUNT;</account>
    &RESERVATION;
    <queue>&QUEUE_PE;</queue>
    &PE_EXTRA;
    &CORES_EXTRA;
    &ANALYSIS_RESOURCES;
    &ENV_VARS;
    <dependency>
      <and>
        <taskdep task="atm_ic"/>
        <taskdep task="obs_prep"/>
	<streq><left>&RUN_GSI;</left><right>YES</right></streq>
@** if RUN_ATM_VI_FGAT==YES
	<or>
          <strneq><left>&RUN_ATM_VI_FGAT;</left><right>YES</right></strneq>
          <metataskdep metatask="atm_vi_fgat"/>
        </or>
@** endif
@** if RUN_ATM_MERGE_FGAT==YES
	<or>
          <strneq><left>&RUN_ATM_MERGE_FGAT;</left><right>YES</right></strneq>
          <metataskdep metatask="atm_merge_fgat"/>
        </or>
@** endif
	<or>
          <not><cycleexistdep cycle_offset="-6:00:00"/></not>
	  <and>
            <datadep age="02:00"><cyclestr offset="-6:00:00">&COMhafs;</cyclestr>/RESTART/<cyclestr>@Y@m@d.@H</cyclestr>0000.fv_core.res.tile1.nc</datadep>
            <datadep age="02:00"><cyclestr offset="-6:00:00">&COMhafs;</cyclestr>/RESTART/grid_spec.nc</datadep>
@** if RUN_ENSDA==YES
            <sh>if [[ $(/bin/ls -l <cyclestr offset="-6:00:00">&COMhafs;</cyclestr>/RESTART_ens/mem*/<cyclestr>@Y@m@d.@H</cyclestr>0000.fv_core.res.tile1.nc | wc -l) -ge &ENS_SIZE; ]]; then exit 0; else exit 1; fi</sh>
@** endif
          </and>
        </or>
      </and>
    </dependency>
  </task>
@** endif

@** if RUN_ANALYSIS_MERGE==YES
  <task name="analysis_merge" maxtries="&MAX_TRIES;">
    <command>&JOBhafs;/JHAFS_MERGE</command>
    <jobname>hafs_analysis_merge_&SID;_<cyclestr>@Y@m@d@H</cyclestr></jobname>
    <join><cyclestr>&WORKhafs;/hafs_analysis_merge.log</cyclestr></join>
    <account>&ACCOUNT;</account>
    &RESERVATION;
    <queue>&QUEUE_PE;</queue>
    &PE_EXTRA;
    &CORES_EXTRA;
    &MERGE_RESOURCES;
    &ENV_VARS;
    <envar><name>MERGE_TYPE</name><value>analysis</value></envar>
    <dependency>
      <and>
@** if RUN_ATM_INIT==YES
        <taskdep task="atm_init"/>
@** endif
        <or>
          <taskdep task="atm_vi"/>
          <strneq><left>&RUN_ATM_VI;</left><right>YES</right></strneq>
        </or>
        <or>
          <taskdep task="analysis"/>
          <strneq><left>&RUN_GSI;</left><right>YES</right></strneq>
        </or>
      </and>
    </dependency>
  </task>
@** endif

@** endif

  <task name="forecast" maxtries="&MAX_TRIES;">
    <command>&JOBhafs;/JHAFS_FORECAST</command>
    <jobname>hafs_forecast_&SID;_<cyclestr>@Y@m@d@H</cyclestr></jobname>
    <join><cyclestr>&WORKhafs;/hafs_forecast.log</cyclestr></join>
    <account>&ACCOUNT;</account>
    &RESERVATION;
    <queue>&QUEUE_FORECAST;</queue>
    &PE_EXTRA;
    &CORES_EXTRA;
    &FORECAST_RESOURCES;
    &ENV_VARS;

    <dependency>
      <and>
@**   if RUN_ATM_MVNEST==YES
        <taskdep task="atm_prep_mvnest"/>
@**   endif
@**   if RUN_DATM==YES
        <taskdep task="atm_prep"/>
@**   endif
@**   if RUN_DOCN==YES
        <taskdep task="ocn_prep"/>
@** endif
@** if RUN_WAVE==YES
        <taskdep task="wav_prep"/>
@** endif
        <or>
          <streq><left>&RUN_DATM;</left><right>YES</right></streq>
          <and>
            <taskdep task="atm_ic"/>
@** if gtype==regional
            <metataskdep metatask="atm_lbc"/>
@** if RUN_ATM_INIT==YES
            <taskdep task="atm_init"/>
@** endif
@** if RUN_ATM_MERGE==YES
            <taskdep task="atm_merge"/>
@** endif
@** if RUN_ATM_VI==YES
            <taskdep task="atm_vi"/>
@** endif
@** if RUN_GSI==YES
            <taskdep task="analysis"/>
@** endif
@** if RUN_ANALYSIS_MERGE==YES
            <taskdep task="analysis_merge"/>
@** endif
@** endif
          </and>
        </or>
@** if RUN_OCEAN==YES
        <taskdep task="ocn_prep"/>
@** endif
      </and>
    </dependency>
  </task>

  <task name="atm_post" maxtries="&MAX_TRIES;">
    <command>&JOBhafs;/JHAFS_ATM_POST</command>
    <jobname>hafs_atm_post_&SID;_<cyclestr>@Y@m@d@H</cyclestr></jobname>
    <join><cyclestr>&WORKhafs;/hafs_atm_post.log</cyclestr></join>
    <account>&ACCOUNT;</account>
    &RESERVATION;
    <queue>&QUEUE_PE;</queue>
    &PE_EXTRA;
    &CORES_EXTRA;
    &ATM_POST_RESOURCES;
    &ENV_VARS;

    <dependency>
      <!-- Start the atm_post if the forecast is running or if it has
           already completed and we are not using a data atmosphere. -->
      <and>
        <streq><left>&RUN_DATM;</left><right>NO</right></streq>
        <or>
          <taskdep task="forecast" state="RUNNING"/>
          <taskdep task="forecast"/>
        </or>
      </and>
    </dependency>
  </task>

@** if RUN_OCEAN==YES
  <task name="ocn_post" maxtries="&MAX_TRIES;">
    <command>&JOBhafs;/JHAFS_OCN_POST</command>
    <jobname>hafs_ocn_post_&SID;_<cyclestr>@Y@m@d@H</cyclestr></jobname>
    <join><cyclestr>&WORKhafs;/hafs_ocn_post.log</cyclestr></join>
    <account>&ACCOUNT;</account>
    &RESERVATION;
    <queue>&QUEUE_PE;</queue>
    &PE_EXTRA;
    &CORES_EXTRA;
    &OCN_POST_RESOURCES;
    &ENV_VARS;

    <dependency>
      <!-- Start the ocn_post if the forecast is running or if it has
           already completed. -->
      <or>
        <taskdep task="forecast" state="RUNNING"/>
        <taskdep task="forecast"/>
      </or>
    </dependency>
  </task>
@** endif

@** if RUN_WAVE==YES
  <task name="wav_post" maxtries="&MAX_TRIES;">
    <command>&JOBhafs;/JHAFS_WAV_POST</command>
    <jobname>hafs_wav_post_&SID;_<cyclestr>@Y@m@d@H</cyclestr></jobname>
    <join><cyclestr>&WORKhafs;/hafs_wav_post.log</cyclestr></join>
    <account>&ACCOUNT;</account>
    &RESERVATION;
    <queue>&QUEUE_PE;</queue>
    &PE_EXTRA;
    &CORES_EXTRA;
    &WAV_POST_RESOURCES;
    &ENV_VARS;

    <dependency>
      <!-- Start the wav_post if the forecast is running or if it has
           already completed. -->
      <or>
        <taskdep task="forecast"/>
      </or>
    </dependency>
  </task>
@** endif

  <task name="product" maxtries="&MAX_TRIES;">
    <command>&JOBhafs;/JHAFS_PRODUCT</command>
    <jobname>hafs_product_&SID;_<cyclestr>@Y@m@d@H</cyclestr></jobname>
    <join><cyclestr>&WORKhafs;/hafs_product.log</cyclestr></join>
    <account>&ACCOUNT;</account>
    &RESERVATION;
    <queue>&QUEUE_PE;</queue>
    &PE_EXTRA;
    &CORES_EXTRA;
    &PRODUCT_RESOURCES;
    &ENV_VARS;

    <dependency>
     <!-- Start the tracker if the atm_post is running or if it has
          already completed and we are not using a data atmosphere. -->
      <and>
        <streq><left>&RUN_DATM;</left><right>NO</right></streq>
        <or>
          <taskdep task="atm_post" state="RUNNING"/>
          <taskdep task="atm_post"/>
        </or>
      </and>
    </dependency>
  </task>

@** if RUN_ENSDA==YES
  <task name="atm_prep_ens" maxtries="&MAX_TRIES;">
    <command>&JOBhafs;/JHAFS_ATM_PREP</command>
    <jobname>hafs_atm_prep_ens_&SID;_<cyclestr>@Y@m@d@H</cyclestr></jobname>
    <join><cyclestr>&WORKhafs;/hafs_atm_prep_ens.log</cyclestr></join>
    <account>&ACCOUNT;</account>
    &RESERVATION;
    <queue>&QUEUE_PE;</queue>
    &PE_EXTRA;
    &CORES_EXTRA;
    &ATM_PREP_RESOURCES;
    &ENV_VARS;
    <envar><name>ENSDA</name><value>YES</value></envar>

    <dependency>
      <and>
        <taskdep task="launch"/>
        <!-- Wait until the deterministic forecast job is running or completed. -->
        <or>
          <taskdep task="forecast" state="RUNNING"/>
          <taskdep task="forecast"/>
        </or>
      </and>
    </dependency>
  </task>

  <metatask name="atm_ic_ens" mode="parallel">
    <var name="MEM">&ENSIDS;</var>
    <task name="atm_ic_ens#MEM#" maxtries="&MAX_TRIES;">
      <command>&JOBhafs;/JHAFS_ATM_IC</command>
      <jobname>hafs_atm_ic_ens#MEM#_&SID;_<cyclestr>@Y@m@d@H</cyclestr></jobname>
      <join><cyclestr>&WORKhafs;/hafs_atm_ic_ens#MEM#.log</cyclestr></join>
      <account>&ACCOUNT;</account>
      &RESERVATION;
      <queue>&QUEUE_PE;</queue>
      &PE_EXTRA;
      &CORES_EXTRA;
      &ATM_IC_ENS_RESOURCES;
      &ENV_VARS;
      <envar><name>ENSDA</name><value>YES</value></envar>
      <envar><name>ENSID</name><value>#MEM#</value></envar>

      <dependency>
        <and>
          <taskdep task="atm_prep_ens"/>
          <or>
            <taskdep task="input"/>
            <strneq><left>&FETCH_INPUT;</left><right>YES</right></strneq>
          </or>
          <!-- Second dependency: the GFS output must be available -->
          <timedep><cyclestr offset="3:25:00">@Y@m@d@H@M@S</cyclestr></timedep>
          <!-- Or use COMgfs file dependency. Don't start until GFS analysis is available.-->
          <and>
@** if GFSVER==PROD2019
            <datadep age="02:00" minsize="3000000000"><cyclestr offset="-6:00:00">&COMgfs;/enkfgdas.@Y@m@d/@H/mem#MEM#/gdas.t@Hz.atmf006.nemsio</cyclestr></datadep>
            <datadep age="02:00" minsize="500000000"><cyclestr offset="-6:00:00">&COMgfs;/enkfgdas.@Y@m@d/@H/mem#MEM#/gdas.t@Hz.sfcf006.nemsio</cyclestr></datadep>
@** endif
@** if GFSVER==PROD2021
            <datadep age="02:00" minsize="1000000000"><cyclestr offset="-6:00:00">&COMgfs;/enkfgdas.@Y@m@d/@H/atmos/mem#MEM#/gdas.t@Hz.atmf006.nc</cyclestr></datadep>
            <datadep age="02:00" minsize="200000000"><cyclestr offset="-6:00:00">&COMgfs;/enkfgdas.@Y@m@d/@H/atmos/mem#MEM#/gdas.t@Hz.sfcf006.nc</cyclestr></datadep>
@** endif
          </and>
        </and>
      </dependency>
    </task>
  </metatask>

@** if RUN_ATM_INIT_ENS==YES
  <metatask name="atm_init_ens">
    <var name="MEM">&ENSIDS;</var>
    <task name="atm_init_ens#MEM#" maxtries="&MAX_TRIES;">
      <command>&JOBhafs;/JHAFS_ATM_INIT</command>
      <jobname>hafs_atm_init_ens#MEM#_&SID;_<cyclestr>@Y@m@d@H</cyclestr></jobname>
      <join><cyclestr>&WORKhafs;/hafs_atm_init_ens#MEM#.log</cyclestr></join>
      <account>&ACCOUNT;</account>
      &RESERVATION;
      <queue>&QUEUE_PE;</queue>
      &PE_EXTRA;
      &CORES_EXTRA;
      &ATM_INIT_RESOURCES;
      &ENV_VARS;
      <envar><name>ENSDA</name><value>YES</value></envar>
      <envar><name>ENSID</name><value>#MEM#</value></envar>

      <dependency>
        <and>
          <taskdep task="atm_ic_ens#MEM#"/>
          <streq><left>&RUN_ATM_INIT_ENS;</left><right>YES</right></streq>
        </and>
      </dependency>
    </task>
  </metatask>
@** endif

@** if RUN_ATM_MERGE_ENS==YES
  <metatask name="atm_merge_ens">
    <var name="MEM">&ENSIDS;</var>
    <task name="atm_merge_ens#MEM#" maxtries="&MAX_TRIES;">
      <command>&JOBhafs;/JHAFS_MERGE</command>
      <jobname>hafs_atm_merge_ens#MEM#_&SID;_<cyclestr>@Y@m@d@H</cyclestr></jobname>
      <join><cyclestr>&WORKhafs;/hafs_atm_merge_ens#MEM#.log</cyclestr></join>
      <account>&ACCOUNT;</account>
      &RESERVATION;
      <queue>&QUEUE_PE;</queue>
      &PE_EXTRA;
      &CORES_EXTRA;
      &MERGE_RESOURCES;
      &ENV_VARS;
      <envar><name>MERGE_TYPE</name><value>init</value></envar>
      <envar><name>ENSDA</name><value>YES</value></envar>
      <envar><name>ENSID</name><value>#MEM#</value></envar>

      <dependency>
        <and>
          <taskdep task="atm_init_ens#MEM#"/>
          <streq><left>&RUN_ATM_MERGE_ENS;</left><right>YES</right></streq>
          <or>
            <not><cycleexistdep cycle_offset="-6:00:00"/></not>
            <and>
              <datadep age="02:00"><cyclestr offset="-6:00:00">&COMhafs;</cyclestr>/RESTART_ens/mem#MEM#/<cyclestr>@Y@m@d.@H</cyclestr>0000.fv_core.res.tile1.nc</datadep>
              <datadep age="02:00"><cyclestr offset="-6:00:00">&COMhafs;/product_ens/mem#MEM#/&sidlc;.@Y@m@d@H</cyclestr>.&RUN;.trak.atcfunix.f006</datadep>
            </and>
          </or>
        </and>
      </dependency>
    </task>
  </metatask>
@** endif

@** if RUN_ATM_VI_ENS==YES
  <metatask name="atm_vi_ens">
    <var name="MEM">&ENSIDS;</var>
    <task name="atm_vi_ens#MEM#" maxtries="&MAX_TRIES;">
      <command>&JOBhafs;/JHAFS_ATM_VI</command>
      <jobname>hafs_atm_vi_ens#MEM#_&SID;_<cyclestr>@Y@m@d@H</cyclestr></jobname>
      <join><cyclestr>&WORKhafs;/hafs_atm_vi_ens#MEM#.log</cyclestr></join>
      <account>&ACCOUNT;</account>
      &RESERVATION;
      <queue>&QUEUE_PE;</queue>
      &PE_EXTRA;
      &CORES_EXTRA;
      &ATM_VI_RESOURCES;
      &ENV_VARS;
      <envar><name>ENSDA</name><value>YES</value></envar>
      <envar><name>ENSID</name><value>#MEM#</value></envar>

      <dependency>
        <and>
          <taskdep task="atm_init_ens#MEM#"/>
          <streq><left>&RUN_ATM_VI_ENS;</left><right>YES</right></streq>
          <or>
            <not><cycleexistdep cycle_offset="-6:00:00"/></not>
            <and>
              <datadep age="02:00"><cyclestr offset="-6:00:00">&COMhafs;</cyclestr>/RESTART_ens/mem#MEM#/<cyclestr>@Y@m@d.@H</cyclestr>0000.fv_core.res.tile1.nc</datadep>
              <datadep age="02:00"><cyclestr offset="-6:00:00">&COMhafs;/product_ens/mem#MEM#/&sidlc;.@Y@m@d@H</cyclestr>.&RUN;.trak.atcfunix.f006</datadep>
            </and>
          </or>
        </and>
      </dependency>
    </task>
  </metatask>
@** endif

@** if gtype==regional
  <metatask name="atm_lbc_ens">
    <var name="MEM">&ENSIDS;</var>
    <metatask name="atm_lbcgrp_ens">
      <var name="group">001</var>
      <task name="atm_lbc#group#_ens#MEM#" maxtries="&MAX_TRIES;">
        <command>&JOBhafs;/JHAFS_ATM_LBC</command>
        <jobname>hafs_atm_lbc#group#_ens#MEM#_&SID;_<cyclestr>@Y@m@d@H</cyclestr></jobname>
        <join><cyclestr>&WORKhafs;/hafs_atm_lbc#group#_ens#MEM#.log</cyclestr></join>
        <account>&ACCOUNT;</account>
        &RESERVATION;
        <queue>&QUEUE_PE;</queue>
        &PE_EXTRA;
        &CORES_EXTRA;
        &ATM_LBC_ENS_RESOURCES;
        &ENV_VARS;
        <envar><name>ENSDA</name><value>YES</value></envar>
        <envar><name>ENSID</name><value>#MEM#</value></envar>
        <envar><name>BC_GROUPN</name><value>1</value></envar>
        <envar><name>BC_GROUPI</name><value>#group#</value></envar>

        <dependency>
          <and>
            <taskdep task="atm_prep_ens"/>
            <or>
              <taskdep task="input"/>
              <strneq><left>&FETCH_INPUT;</left><right>YES</right></strneq>
            </or>
            <!-- Second dependency: the GFS output must be available -->
            <timedep><cyclestr offset="4:10:00">@Y@m@d@H@M@S</cyclestr></timedep>
            <!-- Or use COMgfs file dependency. Don't start until GFS 126h forecast is available.-->
            <and>
@** if GFSVER==PROD2019
              <datadep age="02:00" minsize="3000000000"><cyclestr>&COMgfs;/enkfgdas.@Y@m@d/@H/mem#MEM#/gdas.t@Hz.atmf006.nemsio</cyclestr></datadep>
@** endif
@** if GFSVER==PROD2021
              <datadep age="02:00" minsize="1000000000"><cyclestr>&COMgfs;/enkfgdas.@Y@m@d/@H/atmos/mem#MEM#/gdas.t@Hz.atmf006.nc</cyclestr></datadep>
@** endif
            </and>
          </and>
        </dependency>
      </task>
    </metatask>
  </metatask>
@** endif

@** if RUN_ENKF==YES
  <task name="enkf_mean" maxtries="&MAX_TRIES;">
    <command>&JOBhafs;/JHAFS_ENKF</command>
    <jobname>hafs_enkf_mean_&SID;_<cyclestr>@Y@m@d@H</cyclestr></jobname>
    <join><cyclestr>&WORKhafs;/hafs_enkf_mean.log</cyclestr></join>
    <account>&ACCOUNT;</account>
    &RESERVATION;
    <queue>&QUEUE_PE;</queue>
    &PE_EXTRA;
    &CORES_EXTRA;
    &ENKF_ENKF_RESOURCES;
    &ENV_VARS;
    <envar><name>ENSDA</name><value>YES</value></envar>
    <envar><name>ldo_enscalc_option</name><value>1</value></envar>

    <dependency>
      <and>
        <taskdep task="atm_prep_ens"/>
        <cycleexistdep cycle_offset="-6:00:00"/>
        <streq><left>&RUN_ENKF;</left><right>YES</right></streq>
        <sh>if [[ $(/bin/ls -l <cyclestr offset="-6:00:00">&COMhafs;</cyclestr>/RESTART_ens/mem*/<cyclestr>@Y@m@d.@H</cyclestr>0000.fv_core.res.tile1.nc | wc -l) -ge &ENS_SIZE; ]]; then exit 0; else exit 1; fi</sh>
      </and>
    </dependency>
  </task>

  <task name="enkf_hx_mean" maxtries="&MAX_TRIES;">
    <command>&JOBhafs;/JHAFS_ENKF_HX</command>
    <jobname>hafs_enkf_hx_mean_&SID;_<cyclestr>@Y@m@d@H</cyclestr></jobname>
    <join><cyclestr>&WORKhafs;/hafs_enkf_hx_mean.log</cyclestr></join>
    <account>&ACCOUNT;</account>
    &RESERVATION;
    <queue>&QUEUE_PE;</queue>
    &PE_EXTRA;
    &CORES_EXTRA;
    &ENKF_GSI_RESOURCES;
    &ENV_VARS;
    <envar><name>ENSDA</name><value>YES</value></envar>

    <dependency>
      <and>
        <or>
          <taskdep task="analysis" state="RUNNING"/>
          <taskdep task="analysis"/>
        </or>
        <taskdep task="enkf_mean"/>
      </and>
    </dependency>
  </task>

  <metatask name="enkf_hx_ens">
    <var name="MEM">&ENSIDS;</var>
    <task name="enkf_hx_ens#MEM#" maxtries="&MAX_TRIES;">
      <command>&JOBhafs;/JHAFS_ENKF_HX</command>
      <jobname>hafs_enkf_hx_ens#MEM#_&SID;_<cyclestr>@Y@m@d@H</cyclestr></jobname>
      <join><cyclestr>&WORKhafs;/hafs_enkf_hx_ens#MEM#.log</cyclestr></join>
      <account>&ACCOUNT;</account>
      &RESERVATION;
      <queue>&QUEUE_PE;</queue>
      &PE_EXTRA;
      &CORES_EXTRA;
      &ENKF_GSI_RESOURCES;
      &ENV_VARS;
      <envar><name>ENSDA</name><value>YES</value></envar>
      <envar><name>HX_ENS</name><value>YES</value></envar>
      <envar><name>ENSID</name><value>#MEM#</value></envar>

      <dependency>
        <taskdep task="enkf_hx_mean"/>
      </dependency>
    </task>
  </metatask>

  <task name="enkf_update" maxtries="&MAX_TRIES;">
    <command>&JOBhafs;/JHAFS_ENKF</command>
    <jobname>hafs_enkf_update_&SID;_<cyclestr>@Y@m@d@H</cyclestr></jobname>
    <join><cyclestr>&WORKhafs;/hafs_enkf_update.log</cyclestr></join>
    <account>&ACCOUNT;</account>
    &RESERVATION;
    <queue>&QUEUE_PE;</queue>
    &PE_EXTRA;
    &CORES_EXTRA;
    &ENKF_ENKF_RESOURCES;
    &ENV_VARS;
    <envar><name>ENSDA</name><value>YES</value></envar>
    <envar><name>ldo_enscalc_option</name><value>0</value></envar>

    <dependency>
      <and>
        <taskdep task="enkf_hx_mean"/>
        <metataskdep metatask="enkf_hx_ens"/>
      </and>
    </dependency>
  </task>

  <task name="enkf_recenter" maxtries="&MAX_TRIES;">
    <command>&JOBhafs;/JHAFS_ENKF</command>
    <jobname>hafs_enkf_recenter_&SID;_<cyclestr>@Y@m@d@H</cyclestr></jobname>
    <join><cyclestr>&WORKhafs;/hafs_enkf_recenter.log</cyclestr></join>
    <account>&ACCOUNT;</account>
    &RESERVATION;
    <queue>&QUEUE_PE;</queue>
    &PE_EXTRA;
    &CORES_EXTRA;
    &ENKF_ENKF_RESOURCES;
    &ENV_VARS;
    <envar><name>ENSDA</name><value>YES</value></envar>
    <envar><name>ldo_enscalc_option</name><value>2</value></envar>

    <dependency>
      <and>
        <taskdep task="enkf_update"/>
        <taskdep task="analysis"/>
      </and>
    </dependency>
  </task>
@** endif

@** if RUN_ANALYSIS_MERGE_ENS==YES
  <metatask name="analysis_merge_ens" mode="parallel">
    <var name="MEM">&ENSIDS;</var>
    <task name="analysis_merge_ens#MEM#" maxtries="&MAX_TRIES;">
      <command>&JOBhafs;/JHAFS_MERGE</command>
      <jobname>hafs_analysis_merge_ens#MEM#_&SID;_<cyclestr>@Y@m@d@H</cyclestr></jobname>
      <join><cyclestr>&WORKhafs;/hafs_analysis_merge_ens#MEM#.log</cyclestr></join>
      <account>&ACCOUNT;</account>
      &RESERVATION;
      <queue>&QUEUE_PE;</queue>
      &PE_EXTRA;
      &CORES_EXTRA;
      &MERGE_RESOURCES;
      &ENV_VARS;
      <envar><name>MERGE_TYPE</name><value>analysis</value></envar>
      <envar><name>ENSDA</name><value>YES</value></envar>
      <envar><name>ENSID</name><value>#MEM#</value></envar>
      <dependency>
        <and>
@** if RUN_ATM_INIT_ENS==YES
          <taskdep task="atm_init_ens#MEM#"/>
@** endif
          <or>
            <taskdep task="atm_vi_ens#MEM#"/>
            <strneq><left>&RUN_ATM_VI_ENS;</left><right>YES</right></strneq>
          </or>
          <or>
            <taskdep task="enkf_recenter"/>
            <strneq><left>&RUN_ANALYSIS_MERGE_ENS;</left><right>YES</right></strneq>
          </or>
        </and>
      </dependency>
    </task>
  </metatask>
@** endif

  <metatask name="forecast_ens" mode="parallel">
    <var name="MEM">&ENSIDS;</var>
    <task name="forecast_ens#MEM#" maxtries="&MAX_TRIES;">
      <command>&JOBhafs;/JHAFS_FORECAST</command>
      <jobname>hafs_forecast_ens#MEM#_&SID;_<cyclestr>@Y@m@d@H</cyclestr></jobname>
      <join><cyclestr>&WORKhafs;/hafs_forecast_ens#MEM#.log</cyclestr></join>
      <account>&ACCOUNT;</account>
      &RESERVATION;
      <queue>&QUEUE_PE;</queue>
      &PE_EXTRA;
      &CORES_EXTRA;
      &FORECAST_ENS_RESOURCES;
      &ENV_VARS;
      <envar><name>ENSDA</name><value>YES</value></envar>
      <envar><name>ENSID</name><value>#MEM#</value></envar>

      <dependency>
        <and>
          <metataskdep metatask="atm_ic_ens"/>
@** if gtype==regional
          <metataskdep metatask="atm_lbc_ens"/>
@** if RUN_OCEAN==YES
          <taskdep task="ocn_prep"/>
@** endif
@** if RUN_WAVE==YES
          <taskdep task="wav_prep"/>
@** endif
@** if RUN_WAVE==YES
          <taskdep task="wav_prep"/>
@** endif
@** if RUN_ENKF==YES
          <or>
            <not><cycleexistdep cycle_offset="-6:00:00"/></not>
            <taskdep task="enkf_recenter"/>
          </or>
@** endif
@** if RUN_ANALYSIS_MERGE_ENS==YES
          <or>
            <not><cycleexistdep cycle_offset="-6:00:00"/></not>
            <taskdep task="analysis_merge_ens#MEM#"/>
          </or>
@** endif
@** endif
        </and>
      </dependency>
    </task>
  </metatask>

  <metatask name="atm_post_ens" mode="parallel">
    <var name="MEM">&ENSIDS;</var>
    <task name="atm_post_ens#MEM#" maxtries="&MAX_TRIES;">
      <command>&JOBhafs;/JHAFS_ATM_POST</command>
      <jobname>hafs_atm_post_ens#MEM#_&SID;_<cyclestr>@Y@m@d@H</cyclestr></jobname>
      <join><cyclestr>&WORKhafs;/hafs_atm_post_ens#MEM#.log</cyclestr></join>
      <account>&ACCOUNT;</account>
      &RESERVATION;
      <queue>&QUEUE_PE;</queue>
      &PE_EXTRA;
      &CORES_EXTRA;
      &ATM_POST_RESOURCES;
      &ENV_VARS;
      <envar><name>ENSDA</name><value>YES</value></envar>
      <envar><name>ENSID</name><value>#MEM#</value></envar>

      <dependency>
        <!-- Start the atm_post if the forecast is running or if it has
                                     already completed. -->
        <or>
          <taskdep task="forecast_ens#MEM#" state="RUNNING"/>
          <taskdep task="forecast_ens#MEM#"/>
        </or>
      </dependency>
    </task>
  </metatask>

  <metatask name="product_ens" mode="parallel">
    <var name="MEM">&ENSIDS;</var>
    <task name="product_ens#MEM#" maxtries="&MAX_TRIES;">
      <command>&JOBhafs;/JHAFS_PRODUCT</command>
      <jobname>hafs_product_ens#MEM#_&SID;_<cyclestr>@Y@m@d@H</cyclestr></jobname>
      <join><cyclestr>&WORKhafs;/hafs_product_ens#MEM#.log</cyclestr></join>
      <account>&ACCOUNT;</account>
      &RESERVATION;
      <queue>&QUEUE_PE;</queue>
      &CORES_EXTRA;
      &PE_EXTRA;
      &PRODUCT_RESOURCES;
      &ENV_VARS;
      <envar><name>ENSDA</name><value>YES</value></envar>
      <envar><name>ENSID</name><value>#MEM#</value></envar>

      <dependency>
       <!-- Start the tracker if the atm_post is running or if it has
            already completed. -->
        <or>
          <taskdep task="atm_post_ens#MEM#" state="RUNNING"/>
          <taskdep task="atm_post_ens#MEM#"/>
        </or>
      </dependency>
    </task>
  </metatask>

@** endif

@** if RUN_HRDGRAPHICS==YES
  <task name="hrdgraphics" maxtries="&MAX_TRIES;">
    <command>&JOBhafs;/JHAFS_GRAPHICS</command>
    <jobname>hafs_hrdgraphics_&SID;_<cyclestr>@Y@m@d@H</cyclestr></jobname>
    <join><cyclestr>&WORKhafs;/hafs_hrdgraphics.log</cyclestr></join>
    <account>&ACCOUNT;</account>
    &RESERVATION;
    <queue>&QUEUE_PE;</queue>
    &CORES_EXTRA;
    &PE_EXTRA;
    &HRDGRAPHICS_RESOURCES;
    &ENV_VARS;
    <envar><name>GRAPH</name><value>HRD</value></envar>

    <dependency>
      <!-- Start the product if the product is running or if it has
           already completed. -->
      <or>
        <taskdep task="product" state="RUNNING"/>
        <taskdep task="product"/>
      </or>
    </dependency>
  </task>
@** endif

@** if RUN_EMCGRAPHICS==YES
  <task name="emcgraphics" maxtries="&MAX_TRIES;">
    <command>&JOBhafs;/JHAFS_GRAPHICS</command>
    <jobname>hafs_emcgraphics_&SID;_<cyclestr>@Y@m@d@H</cyclestr></jobname>
    <join><cyclestr>&WORKhafs;/hafs_emcgraphics.log</cyclestr></join>
    <account>&ACCOUNT;</account>
    &RESERVATION;
    <!--&RESERV_FCST;-->
    <queue>&QUEUE_PE;</queue>
    &CORES_EXTRA;
    &PE_EXTRA;
    &EMCGRAPHICS_RESOURCES;
    &ENV_VARS;
    <envar><name>GRAPH</name><value>EMC</value></envar>
    <envar><name>COMgraph</name><value>@[CDSCRUB]/comgraph_&SUBEXPT;</value></envar>

    <dependency>
      <!-- Start the product if the product is running or if it has
           already completed. -->
      <or>
        <taskdep task="product" state="RUNNING"/>
        <taskdep task="product"/>
      </or>
    </dependency>
  </task>
@** endif

  <task name="archive_disk" maxtries="&MAX_TRIES_TRANSFER;">
    <command>&PRE; &EXhafs;/exhafs_archive.py</command>
    <jobname>hafs_archive_disk_&SID;_<cyclestr>@Y@m@d@H</cyclestr></jobname>
    <join><cyclestr>&WORKhafs;/hafs_archive_disk.log</cyclestr></join>
    <account>&ACCOUNT;</account>
    &RESERVATION;
    <queue>&QUEUE_SERVICE;</queue>
    &SERVICE_EXTRA;
    <cores>1</cores>
    &CORES_EXTRA;
    <envar><name>TOTAL_TASKS</name><value>1</value></envar>
    <walltime>06:00:00</walltime>
    &MEMORY;
    &ENV_VARS;
    <envar><name>ARCHIVE_STEP</name><value>DISK</value></envar>

    <dependency>
      <and>
        <taskdep task="forecast"/>
        <taskdep task="atm_post"/>
@** if RUN_OCEAN==YES
        <taskdep task="ocn_post"/>
@** endif
@** if RUN_WAVE==YES
        <taskdep task="wav_post"/>
@** endif
        <taskdep task="product"/>
@** if RUN_HRDGRAPHICS==YES
        <taskdep task="hrdgraphics"/>
@** endif
@** if RUN_EMCGRAPHICS==YES
        <taskdep task="emcgraphics"/>
@** endif
@** if RUN_ENSDA==YES
        <metataskdep metatask="product_ens"/>
@** endif
      </and>
    </dependency>
  </task>

  <task name="archive_tape" maxtries="&MAX_TRIES_TRANSFER;">
    <command>&PRE; &EXhafs;/exhafs_archive.py</command>
    <jobname>hafs_archive_&SID;_<cyclestr>@Y@m@d@H</cyclestr></jobname>
    <join><cyclestr>&WORKhafs;/hafs_archive.log</cyclestr></join>
    <account>&ACCOUNT;</account>
    &RESERVATION;
    <queue>&QUEUE_SERVICE;</queue>
    &SERVICE_EXTRA;
    <cores>1</cores>
    &CORES_EXTRA;
    <envar><name>TOTAL_TASKS</name><value>1</value></envar>
    <walltime>06:00:00</walltime>
    &MEMORY;
    &ENV_VARS;
    <envar><name>ARCHIVE_STEP</name><value>TAPE</value></envar>

    <dependency>
      <and>
        <taskdep task="forecast"/>
        <taskdep task="atm_post"/>
@** if RUN_OCEAN==YES
        <taskdep task="ocn_post"/>
@** endif
@** if RUN_WAVE==YES
        <taskdep task="wav_post"/>
@** endif
        <taskdep task="product"/>
@** if RUN_HRDGRAPHICS==YES
        <taskdep task="hrdgraphics"/>
@** endif
@** if RUN_EMCGRAPHICS==YES
        <taskdep task="emcgraphics"/>
@** endif
@** if RUN_ENSDA==YES
        <metataskdep metatask="product_ens"/>
@** endif
        <taskdep task="archive_disk"/>
      </and>
    </dependency>
  </task>

  <task name="scrub_work" maxtries="&MAX_TRIES;">
    <command>&PRE; &USHhafs;/hafs_scrub.py &SCRUB_WORK; WORK</command>
    <jobname>hafs_scrub_work_&SID;_<cyclestr>@Y@m@d@H</cyclestr></jobname>
    <join><cyclestr>&LOGhafs;/hafs_scrub_work_&SID;_@Y@m@d@H.log</cyclestr></join>
    <account>&ACCOUNT;</account>
    &RESERVATION;
    <queue>&QUEUE_SERIAL;</queue>
    &SERIAL_EXTRA;
    <cores>1</cores>
    &CORES_EXTRA;
    <envar><name>TOTAL_TASKS</name><value>1</value></envar>
    <walltime>00:15:00</walltime>
    &MEMORY;
    &ENV_VARS;
    <envar><name>HAFS_FORCE_ALT_TMPDIR</name><value>&LOGhafs;/</value></envar>

    <dependency>
      <and>
        <taskdep task="archive_tape"/>
        <taskdep task="archive_disk"/>
        <datadep age="&WORK_SCRUB_TIME;"><cyclestr>&COMhafs;/&STORMLABEL;.done</cyclestr></datadep>
        <or>
          <not><cycleexistdep cycle_offset="6:00:00"/></not>
          <taskdep task="forecast" state="RUNNING" cycle_offset="6:00:00"/>
          <taskdep task="forecast" cycle_offset="6:00:00"/>
          <taskdep task="scrub_work" cycle_offset="6:00:00"/>
        </or>
      </and>
    </dependency>
  </task>

  <task name="scrub_com" maxtries="&MAX_TRIES;">
    <command>&PRE; &USHhafs;/hafs_scrub.py &SCRUB_COM; COM</command>
    <jobname>hafs_scrub_com_&SID;_<cyclestr>@Y@m@d@H</cyclestr></jobname>
    <join><cyclestr>&LOGhafs;/hafs_scrub_com_&SID;_@Y@m@d@H.log</cyclestr></join>
    <account>&ACCOUNT;</account>
    &RESERVATION;
    <queue>&QUEUE_SERIAL;</queue>
    &SERIAL_EXTRA;
    <cores>1</cores>
    &CORES_EXTRA;
    <envar><name>TOTAL_TASKS</name><value>1</value></envar>
    <walltime>00:15:00</walltime>
    &MEMORY;
    &ENV_VARS;
    <envar><name>HAFS_FORCE_ALT_TMPDIR</name><value>&LOGhafs;/</value></envar>

    <dependency>
      <!-- Next cycle has finished its initialization OR this cycle is the last cycle,
           AND this cycle's archive and output jobs are complete. -->
      <and>
        <or>
          <not><cycleexistdep cycle_offset="6:00:00"/></not>
          <and>
            <taskdep task="archive_tape" cycle_offset="6:00:00"/>
            <taskdep task="archive_disk" cycle_offset="6:00:00"/>
            <datadep age="&COM_SCRUB_TIME;"><cyclestr offset="6:00:00">&COMhafs;/&STORMLABEL;.done</cyclestr></datadep>
          </and>
          <taskdep task="scrub_com" cycle_offset="6:00:00"/>
        </or>
        <taskdep task="archive_tape"/>
        <taskdep task="archive_disk"/>
        <taskdep task="scrub_work"/>
        <datadep age="&COM_SCRUB_TIME;"><cyclestr>&COMhafs;/&STORMLABEL;.done</cyclestr></datadep>
      </and>
    </dependency>
  </task>

  <task name="donefile" maxtries="&MAX_TRIES;">
    <command>&PRE; &USHhafs;/hafs_donefile.py <cyclestr>&COMhafs;/&STORMLABEL;.done</cyclestr></command>
    <jobname><cyclestr>hafs_donefile_&SID;_@Y@m@d@H</cyclestr></jobname>
    <join><cyclestr>&LOGhafs;/hafs_donefile_&SID;_@Y@m@d@H.log</cyclestr></join>
    <account>&ACCOUNT;</account>
    &RESERVATION;
    <queue>&QUEUE_SERIAL;</queue>
    &SERIAL_EXTRA;
    <cores>1</cores>
    &CORES_EXTRA;
    <envar><name>TOTAL_TASKS</name><value>1</value></envar>
    <walltime>00:15:00</walltime>
    &MEMORY;
    &ENV_VARS;
    <envar><name>HAFS_FORCE_ALT_TMPDIR</name><value>&LOGhafs;/</value></envar>

    <dependency>
      <or>
        <and>
          <taskdep task="atm_post"/>
          <taskdep task="product"/>
        </and>

        <!-- Allow a scrubbed cycle to complete.  This is needed to
             handle cases where someone changes the configuration
             mid-stream, leaving some cycles scrubbed that have not run
             jobs that are newly needed. -->

        <and>
          <taskdep task="scrub_work"/>
          <taskdep task="scrub_com"/>
        </and>
      </or>
    </dependency>
  </task>

  <!-- Final task.  This task exists mainly to set the "final" state
  for the cycle (final="true"), and it also sents a "cycle completed"
  message to the jlogfile.  It is here, instead of in an entity, so
  that you can edit the <dependency> section to match your
  configuration.

  NOTE: Most of the cycle-wide completion dependencies lie in the
  donefile job dependency. -->
  <task name="completion" maxtries="&MAX_TRIES;" final="true">
    <command>&PRE; &USHhafs;/hafs_completion.py &SID; <cyclestr>@Y@m@d@H</cyclestr></command>
    <jobname><cyclestr>hafs_completion_&SID;_@Y@m@d@H</cyclestr></jobname>
    <join><cyclestr>&LOGhafs;/hafs_completion_&SID;_@Y@m@d@H.log</cyclestr></join>
    <account>&ACCOUNT;</account>
    &RESERVATION;
    <queue>&QUEUE_SERIAL;</queue>
    &SERIAL_EXTRA;
    <cores>1</cores>
    &CORES_EXTRA;
    <envar><name>TOTAL_TASKS</name><value>1</value></envar>
    <walltime>00:15:00</walltime>
    &MEMORY;
    &ENV_VARS;
    <envar><name>HAFS_FORCE_ALT_TMPDIR</name><value>&LOGhafs;/</value></envar>

    <dependency>
      <or>
        <and>
          <taskdep task="donefile"/>
          <taskdep task="archive_disk"/>
          <taskdep task="archive_tape"/>
          <taskdep task="scrub_work"/>
          <taskdep task="scrub_com"/>
        </and>

        <!-- Allow a scrubbed cycle to complete.  This is needed to
        handle cases where someone changes the configuration
        mid-stream, leaving some cycles scrubbed that have not run
        jobs that are newly needed. -->

        <and>
          <taskdep task="scrub_work"/>
          <taskdep task="scrub_com"/>
        </and>
      </or>
    </dependency>
  </task>

</workflow>
